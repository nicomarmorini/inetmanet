[General]
scheduler-class = "cSocketRTScheduler"
network = Traceroute

cmdenv-express-mode = true

tkenv-default-run = 0

**.testing = false
**.testTimeout = 0

# udp app (off)
**.cli1.numUdpApps=1
**.udpAppType="UDPSink"
**.cli1.udpApp[0].localPort = 7


# tcp apps
**.numTcpApps=0
**.cli*.tcpAppType="TCPBasicClientApp"
**.srv1.tcpAppType="TCPSinkApp"

# sctp apps
#*.cli*.numSctpApps=0
**.cli1.numSctpApps=0
**.cli2.numSctpApps=0
**.cli3.numSctpApps=0
**.cli4.numSctpApps=0
**.cli5.numSctpApps=0
**.cli6.numSctpApps=0
**.cli7.numSctpApps=0
**.cli8.numSctpApps=0
**.cli*.sctpAppType="SCTPClient"
#**.cli*.sctpAppType="SCTPServer"
**.cli1.sctpApp[0].address=""
**.cli2.sctpApp[0].address=""
**.cli*.sctpApp[0].primaryPath="192.168.0.103"
**.cli2.sctpApp[0].port=0
**.cli1.sctpApp[0].port=0
**.cli1.sctpApp[0].connectAddress="192.168.0.103"
**.cli2.sctpApp[0].connectAddress="10.1.0.102"
**.cli1.sctpApp[0].connectPort=9
**.cli2.sctpApp[0].connectPort=8888
**.cli1.sctpApp[0].startTime=2s  #exponential(20000)
**.cli2.sctpApp[0].startTime=20s #exponential(200)
**.cli1.sctpApp[0].numRequestsPerSession = 10
**.cli2.sctpApp[0].numRequestsPerSession = 10
**.cli*.sctpApp[0].numPacketsToReceive = 0
**.cli1.sctpApp[0].requestLength = 20
**.cli2.sctpApp[0].requestLength = 100
**.cli2.sctpApp[0].thinkTime=0s
**.cli1.sctpApp[0].waitToClose = 30s #Time waited to close the connection after the last packet has been sent.
**.cli2.sctpApp[0].waitToClose = 0s #Time waited to close the connection after the last packet has been sent.
**.cli2.sctpApp[0].idleInterval = truncnormal(1,1)
**.cli1.sctpApp[0].numPacketsToSendPerClient = 0
**.cli1.sctpApp[0].numPacketsToReceivePerClient = 10


**.srv1.numSctpApps=0
**.srv1.sctpAppType="SCTPServer"
**.srv1.sctpApp[0].address=""
**.srv1.sctpApp[0].port=9 # Discard Server for Client 1
**.srv1.sctpApp[0].replyDelay=0
**.srv1.sctpApp[0].outboundStreams=4
**.srv1.sctpApp[0].delayFirstRead = 0
**.srv1.sctpApp[0].numPacketsToSendPerClient = 0
**.srv1.sctpApp[0].numPacketsToReceivePerClient = 1
**.srv1.sctpApp[0].requestLength = 1000
**.srv1.sctpApp[0].thinkTime=0s
**.srv1.sctpApp[0].waitToClose = 0s

**.srv1.sctpApp[1].address=""
**.srv1.sctpApp[1].port=8888 # Echo Server
**.srv1.sctpApp[1].replyDelay=0
**.srv1.sctpApp[1].echoFactor=1
**.srv1.sctpApp[1].echoDelay=0
**.srv1.sctpApp[1].outboundStreams=1
**.srv1.sctpApp[1].delayFirstRead = 0
**.srv1.sctpApp[1].numPacketsToSendPerClient = 0
**.srv1.sctpApp[1].numPacketsToReceivePerClient = 10
**.srv1.sctpApp[1].requestLength = 0
**.srv1.sctpApp[1].thinkTime=0s
**.srv1.sctpApp[1].waitToClose = 0s

# sctp settings
**.sctp.sctpAlgorithmClass="SCTPAlg"
**.sctp.fragPoint=1400
**.sctp.numGapReports=4
**.sctp.rtoMin=1s
**.sctp.rtoMax=60s
**.sctp.rtoInitial=3s
**.sctp.maxBurst=4
**.sctp.assocMaxRetrans=10
**.sctp.pathMaxRetrans=5
**.sctp.maxInitRetrans=8
**.sctp.hbInterval=30s
**.sctp.nagleEnabled=true
**.cli1.sctp.osbWithHeader = true
**.cli2.sctp.osbWithHeader = true
**.srv*.sctp.osbWithHeader = false
**.sctp.rtoAlpha = 0.125s
**.sctp.rtoBeta = 0.25s
**.sctp.validCookieLifetime = 10s
**.sctp.sackPeriod = 0.2s
**.sctp.sackFrequency = 2
**.sctp.reactivatePrimaryPath = false
**.sctp.fragment = false
**.sctp.arwnd = 65535

# tcp settings
**.tcp.mss = 1024
**.tcp.advertisedWindow = 65535 #14336  # 14*mss
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.tcpAlgorithmClass = "TCPReno"
**.tcp.recordStats = true

#ping app (off)
**.pingApp.destAddr = ""
**.pingApp.interval = 1s
**.pingApp.srcAddr = ""
**.pingApp.packetSize = 56B
**.pingApp.hopLimit = 32
**.pingApp.count = 0
**.pingApp.startTime = 1s
**.pingApp.stopTime = 0s
**.pingApp.printPing = true


# ARP configuration
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s
**.networkLayer.proxyARP = true  # Host's is hardwired "false"

# ip settings
**.ip.procDelay = 10us
**.router.IPForward = true

# IPProcessing: processing delays for all nodes
**.routing.procDelay = 0.2 us
**.inputQueue.procDelay = 0.1 us

# NIC configuration
**.ppp[*].queueType = "REDQueue"
**.ppp[*].queue.wq = 0.002
**.ppp[*].queue.minth = 5  # packets
**.ppp[*].queue.maxth = 20  # packets
**.ppp[*].queue.maxp = 0.1  # 1/50
**.ppp[*].queue.pkrate = 150  # ~1K packets on 1.5Mbps link


# hook names
**.qosBehaviorClass = "EnqueueWithoutQoS"

# nam trace
**.nam.logfile = ""
**.nam.prolog = ""
**.namid = -1  # auto

# filter for pcap: narrow this filter wisely or prepare to get lagged by a lot of
# unnessesary packets being handled by the simulation anyway
# For more detailled infos about filtering consider accordant documentation at www.tcpdump.org
#filter-string = "ip dst host 10.1.1 or dst host 10.1.2 or dst host 10.1.3 or dst host 10.1.4"
**.ext[0].filterString = "(udp or icmp) and (dst host 10.2 or dst host 10.3)"
**.ext[0].device = "eth0"


